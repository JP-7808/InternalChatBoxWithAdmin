@{
    ViewData["Title"] = "Chat";
    var currentUserId = ViewBag.CurrentUserId;
    var users = ViewBag.Users as List<InternalChatbox.Models.User>;
    var groups = ViewBag.Groups as List<InternalChatbox.Models.ChatGroup>;
}
<style>
    .message-container {
        display: inline-block;
        margin: 5px 0;
        padding: 8px 12px;
        border-radius: 15px;
        max-width: 70%;
        word-wrap: break-word;
        clear: both;
    }

    .message-left {
        background-color: #f1f0f0;
        float: left;
        border-bottom-left-radius: 0;
    }

    .dropdown-toggle::after {
        display: none;
    }

    .message-right {
        background-color: #20A090;
        color: white;
        float: right;
        border-bottom-right-radius: 0;
        text-align: right;
    }

    .message-meta {
        font-size: 0.75rem;
        color: black;
        margin-top: 2px;
    }

    .profile-pic {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        margin-right: 8px;
        float: left;
    }

    .message-wrapper {
        display: flex;
        align-items: flex-end;
        margin-bottom: 10px;
    }

        .message-wrapper.right {
            justify-content: flex-end;
        }

    #chatBox::after {
        content: "";
        display: table;
        clear: both;
    }

    .chat-footer {
        padding: 10px 20px;
        border-top: 1px solid #ccc;
        background-color: #fff;
        display: none; /* hidden on demo load */
    }

    .input-with-button {
        position: relative;
        width: 100%;
    }

        .input-with-button input {
            width: calc(100% - 125px); /* Adjusted to end before buttons with a small gap */
            padding: 8px 12px;
            display: inline-block;
        }

    @* here is the delete css *@

    .menu-dropdown {
        display: none;
        position: absolute;
        background: white;
        border: 1px solid #ddd;
        box-shadow: 0px 2px 5px rgba(0,0,0,0.2);
        z-index: 100;
        right: 0;
    }

    .menu-btn {
        background: none;
        border: none;
        cursor: pointer;
    }

    .message-menu {
        position: relative;
        display: inline-block;
    }




    .input-with-button button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        padding: 6px 12px;
    }

    .send-button {
        background-color: #20A090;
        color: white;
        border: none;
        border-radius: 50%;
        padding: 10px 12px;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s ease;
        right: 8px; /* Positioned at the far right */
    }

        .send-button:hover {
            background-color: #1a867c;
        }

        .send-button i {
            font-size: 16px;
        }

    .message-menu {
        position: relative;
        display: inline-block;
        margin-left: 8px;
    }

    .menu-btn {
        background: none;
        border: none;
        color: black;
        font-size: 20px;
        cursor: pointer;
    }

    .menu-dropdown {
        display: none;
        position: absolute;
        right: 0;
        background-color: #fff;
        color: #333;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        border-radius: 6px;
        z-index: 1;
        min-width: 100px;
        padding: 5px 0;
    }

        .menu-dropdown button {
            width: 100%;
            background: none;
            border: none;
            padding: 8px 12px;
            text-align: left;
            cursor: pointer;
            color: #d9534f;
        }

    @* .menu-dropdown button:hover {
        background-color: #f5f5f5;
    } *@

    @* .message-menu:hover .menu-dropdown {
        display: block;
    } *@

    .menu-btn {
        background: none;
        border: none;
        cursor: pointer;
        padding: 4px;
    }

    .menu-btn i {
        color: white;
        font-size: 18px;
    }

    .menu-dropdown {
        display: none;
        position: absolute;
        right: 0;
        background-color: #fff;
        color: #333;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        border-radius: 6px;
        z-index: 1;
        min-width: 100px;
        padding: 5px 0;
    }

        .menu-dropdown button {
            width: 100%;
            background: none;
            border: none;
            padding: 8px 12px;
            text-align: left;
            cursor: pointer;
            color: #d9534f;
        }

    @* .menu-dropdown button:hover {
        background-color: #f5f5f5;
    } *@

    @* .message-menu:hover .menu-dropdown {
        display: block;
    } *@
    /* Styling for the insert button */
    .insert-button {
        background-color: #20A090;
        color: white;
        border: none;
        border-radius: 50%;
        padding: 10px 12px;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s ease;
        right: 65px; /* Positioned at the far right */
    }

    .insert-button:hover {
        background-color: #1a867c;
    }

    .insert-button i {
        font-size: 16px;
    }


    /* File link styling */
    .message-right a {
        color: white; /* File name in white */
        text-decoration: underline;
    }

        .message-right a:hover {
            color: black; /* File name turns black on hover */
            text-decoration: none;
        }

    .message-left a {
        color: #333; /* File name in dark gray for message-left */
        text-decoration: underline;
    }

        .message-left a:hover {
            color: #000; /* Darker on hover for message-left */
            text-decoration: none;
        }
</style>

<!-- Create Group Modal -->
<div class="modal fade" id="createGroupModal" tabindex="-1" aria-labelledby="createGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <form id="createGroupForm" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Group</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <label>Group Name</label>
                    <input type="text" class="form-control mb-2" name="GroupName" required />
                    <label>Group Image (optional)</label>
                    <input type="file" class="form-control mb-2" name="GroupImage" accept="image/*" />
                    <label>Select Users for Group (Checkbox)</label>
                    <div id="checkboxUsers">
                        @foreach (var user in users)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@user.Id" id="userCheck_@user.Id" name="UserIds" />
                                <label class="form-check-label" for="userCheck_@user.Id">
                                    @user.Name (@user.Designation)
                                </label>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="chat-container">
    <!-- Sidebar -->
    <div class="chat-sidebar">
        <h5 class="text-center mb-4 fs-4" style="color: #20A090;"><i class="fas fa-comments me-2"></i>Chats</h5>
        <div class="chat-tabs text-center">
            <a href="/Chat/Index"><i class="fas fa-envelope mb-1" style="color: #20A090;"></i> Message</a>
            <a href="/Contacts/Index"><i class="fas fa-user-friends mb-1" style="color: #20A090;"></i> Contacts</a>
            <a href="/Settings/Settings"><i class="fas fa-cog mb-1" style="color: #20A090;"></i> Settings</a>
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text"><i class="fas fa-search" style="color: #20A090;"></i></span>
            <input class="form-control" id="searchInput" placeholder="Search or start a new chat" autocomplete="off" />
            <span class="input-group-text" data-bs-toggle="modal" data-bs-target="#createGroupModal">
                <i class="fas fa-users" style="color: #20A090;"></i>
            </span>
        </div>

        <div class='member-list' style="overflow-y: auto;">
            @foreach (var user in users)
            {
                <div class="chat-contact user-chat" data-id="@user.Id" data-name="@user.Name" data-email="@user.Email">
                    <img src="@(user.ProfileImagePath ?? "/lib/icons/user.jpg.png")" class="avatar" onerror="this.src='/lib/icons/user.jpg.png'" />
                    <div class="chat-contact-info">
                        <div class="fw-bold">@user.Name</div>
                        <span class="text-muted" style="font-size: 0.8rem;">@user.Email</span>
                    </div>
                    @* <div><small><i class="far fa-clock me-1"></i>2 min ago</small></div> *@
                </div>
            }

            @foreach (var group in groups)
            {
                var userMembership = group.Members?.FirstOrDefault(m => m.UserId == currentUserId);
                var isAdmin = userMembership?.IsAdmin ?? false;
                <div class="chat-contact group-chat" data-id="@group.Id" data-admin="@isAdmin.ToString().ToLower()">
                    <img src="@(group.GroupImagePath ?? "/lib/icons/user.jpg.png")" class="avatar" onerror="this.src='/lib/icons/user.jpg.png'" />
                    <div class="chat-contact-info">
                        <div class="fw-bold">@group.GroupName</div>
                    </div>
                    @* <div><small><i class="far fa-clock me-1"></i>2 min ago</small></div> *@
                </div>
            }
        </div>
    </div>

    <!-- Chat Window -->
    <div class="chat-main">
        <!-- Chat Header -->
        <div class="chat-header d-flex align-items-center justify-content-between">
            <!-- Left side: Back button + Profile Info -->
            <div class="d-flex align-items-center">
                <!-- Back Button -->
                <button id="backBtn" class="btn btn-light" style="border: none; background: transparent; padding: 0; margin-right: 10px;">
                    <span style="font-size: 20px; margin: 0;"><</span>
                </button>

                <!-- Profile Info -->
                <div class="d-flex align-items-center">
                    <img src="/lib/icons/user.jpg.png" class="avatar" id="chatHeaderAvatar" onerror="this.src='/lib/icons/user.jpg.png'" />
                    <div class="name-status ms-2">
                        <strong id="chatTitle">Demo</strong><br />
                        @* <span>Active now</span> *@
                    </div>
                </div>
            </div>

            <!-- Right side: Settings Dropdown -->
            <div id="groupSettingsDropdown" class="dropdown" style="display: none; margin-right: 1.5rem;">
                <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-cog d-block mb-1" style="color: #20A090;"></i>
                </a>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" id="editGroupBtn" href="#">Edit Group</a></li>
                    <li><a class="dropdown-item text-danger" id="deleteGroupBtn" href="#">Delete Group</a></li>
                </ul>
            </div>
        </div>

        <!-- Chat Body -->
        <div class="chat-body" id="chatBox" style="height: 90%; overflow-y: auto;">
            <div class="text-center py-3">Select a user or group to start chat</div>
        </div>

        <!-- Chat Footer (Hidden initially) -->
        <div class="chat-footer">
            <div class="input-with-button">
                <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." />
                <button type="button" class="insert-button" onclick="document.getElementById('uploadedFile').click()">
                    <i class="fas fa-paperclip"></i>
                </button>
                <button id="sendBtn" class="send-button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
            <form id="uploadForm" enctype="multipart/form-data" method="post" asp-controller="Chat" asp-action="UploadFile">
                <input type="file" name="uploadedFile" id="uploadedFile" style="display: none;" onchange="uploadFile()" />
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        const currentUserId = parseInt('@currentUserId');
        let receiverId = null;
        let groupId = null;
        let currentChatType = null;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .withAutomaticReconnect()
            .build();

        // Start SignalR connection
        connection.start()
            .then(() => console.log("SignalR connected"))
            .catch(err => console.error("SignalR connection error:", err));

        // Handle private message receipt
        connection.on("ReceivePrivateMessage", function (senderId, senderName, message, profileImagePath, timestamp, messageId) {
            console.log(`Received private message: ID=${messageId}, Sender=${senderId}, Message=${message}`);
            if (currentChatType === 'private' && (receiverId == senderId || currentUserId == senderId)) {
                appendMessage(senderName, message, senderId, timestamp, profileImagePath, messageId);
            } else if (senderId !== currentUserId) {
                console.log(`New message from ${senderName} in another chat`);
                // Optionally show a notification
            }
        });

        // Handle group message receipt
        connection.on("ReceiveGroupMessage", function (groupIdReceived, senderId, senderName, message, profileImagePath, timestamp, messageId) {
            console.log(`Received group message: ID=${messageId}, Group=${groupIdReceived}, Sender=${senderId}, Message=${message}`);
            if (currentChatType === 'group' && groupId == groupIdReceived) {
                appendMessage(senderName, message, senderId, timestamp, profileImagePath, messageId);
            }
        });

        // Append message to chat box
        function appendMessage(senderName, message, senderId, time, profileImagePath, messageId) {
            const sideClass = senderId == currentUserId ? 'message-right' : 'message-left';
            const wrapperClass = senderId == currentUserId ? 'right' : '';
            const finalMessageId = messageId || 'temp-' + Date.now();
            const menuHtml = senderId == currentUserId
                ? `<div class="message-menu">
                       <button class="menu-btn" title="Options">
                           <i class="fas fa-ellipsis-v"></i>
                       </button>
                       <div class="menu-dropdown">
                           <button class="delete-message" data-id="${finalMessageId}">Delete</button>
                       </div>
                   </div>`
                : '';
            const profilePic = senderId != currentUserId
                ? `<img src="${profileImagePath || '/lib/icons/user.jpg.png'}" class="profile-pic" onerror="this.src='/lib/icons/user.jpg.png'" />`
                : '';
            const timeTag = `<div class="message-meta">${time}</div>`;
            const messageHtml = `
                <div class="message-wrapper ${wrapperClass}">
                    ${profilePic}
                    <div id="message-${finalMessageId}" class="message-container ${sideClass}">
                        <b>${senderName}:</b> ${message}
                        ${menuHtml}
                        ${timeTag}
                    </div>
                </div>`;
            $('#chatBox').append(messageHtml);
            $('#chatBox').scrollTop($('#chatBox')[0].scrollHeight);
        }

        // Handle file upload
        function uploadFile() {
            var fileInput = document.getElementById("uploadedFile");
            var file = fileInput.files[0];
            if (!file) return;

            var formData = new FormData();
            formData.append('uploadedFile', file);

            fetch('/Chat/UploadFile', {
                method: 'POST',
                body: formData
            }).then(res => res.json())
            .then(data => {
                if (data.downloadUrl) {
                    const message = `<a href="${data.downloadUrl}" target="_blank" download="${data.fileName}">${data.fileName}</a>`;
                    const now = new Date().toLocaleTimeString('en-US', {
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit'
                    });
                    const profileImagePath = '@ViewBag.UserAvatarUrl';

                    if (receiverId) {
                        connection.invoke("SendPrivateMessage", currentUserId, receiverId, message, '@ViewBag.UserName', profileImagePath)
                            .catch(err => console.error("Error sending private message:", err));
                    } else if (groupId) {
                        appendMessage('@ViewBag.UserName', message, currentUserId, now, profileImagePath, null);
                        connection.invoke("SendGroupMessage", groupId.toString(), currentUserId, message, '@ViewBag.UserName', profileImagePath)
                            .catch(err => console.error("Error sending group message:", err));
                    }
                } else {
                    alert("Upload failed: " + data.message);
                }
                fileInput.value = '';
            }).catch(err => {
                console.error("Upload error:", err);
                alert("Upload error.");
            });
        }

        // Handle user chat click
        $('.user-chat').click(function () {
            receiverId = parseInt($(this).data('id'));
            groupId = null;
            currentChatType = 'private';
            const userName = $(this).find('.fw-bold').text();
            const profileImage = $(this).find('.avatar').attr('src');
            $('#chatTitle').text(userName);
            $('#chatHeaderAvatar').attr('src', profileImage);
            $('#groupSettingsDropdown').hide();
            loadMessages(currentUserId, receiverId, null);

            localStorage.setItem('selectedChat', JSON.stringify({
                type: 'private',
                id: receiverId,
                name: userName,
                profileImage: profileImage
            }));

            $(".chat-header, .chat-body, .chat-footer").show();
            $(".text-center.py-3").hide();
        });

        // Handle group chat click
        $('.group-chat').click(function () {
            groupId = $(this).data('id');
            receiverId = null;
            currentChatType = 'group';
            const groupName = $(this).find('.fw-bold').text();
            const profileImage = $(this).find('.avatar').attr('src');
            $('#chatTitle').text(groupName);
            $('#chatHeaderAvatar').attr('src', profileImage);
            connection.invoke("JoinGroup", groupId.toString())
                .then(() => console.log(`Joined group ${groupId}`))
                .catch(err => console.error(`Error joining group ${groupId}:`, err));
            loadMessages(currentUserId, null, groupId);

            const isAdmin = $(this).data('admin') === true || $(this).data('admin') === "true";
            if (isAdmin) {
                $('#groupSettingsDropdown').show();
                $('#editGroupBtn').attr('href', `/Chat/EditGroup/${groupId}`);
                $('#deleteGroupBtn').data('id', groupId);
            } else {
                $('#groupSettingsDropdown').hide();
            }

            localStorage.setItem('selectedChat', JSON.stringify({
                type: 'group',
                id: groupId,
                name: groupName,
                isAdmin: isAdmin,
                profileImage: profileImage
            }));

            $(".chat-header, .chat-body, .chat-footer").show();
            $(".text-center.py-3").hide();
        });

        // Handle send button click
        $('#sendBtn').click(function () {
            const message = $('#messageInput').val().trim();
            if (!message) return;
            $('#messageInput').val('');
            const profileImagePath = '@ViewBag.UserAvatarUrl';

            if (receiverId) {
                // For private messages, rely on SignalR broadcast
                connection.invoke("SendPrivateMessage", currentUserId, receiverId, message, '@ViewBag.UserName', profileImagePath)
                    .catch(err => console.error("Error sending private message:", err));
            } else if (groupId) {
                // For group messages, append locally for sender
                const now = new Date().toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
                appendMessage('@ViewBag.UserName', message, currentUserId, now, profileImagePath, null);
                connection.invoke("SendGroupMessage", groupId.toString(), currentUserId, message, '@ViewBag.UserName', profileImagePath)
                    .catch(err => console.error("Error sending group message:", err));
            }
        });

        // Load messages from server
        function loadMessages(senderId, receiverId, groupId) {
            $('#chatBox').html('<div class="text-center py-3">Loading messages...</div>');
            $.get(`/Chat/GetMessages?senderId=${senderId}&receiverId=${receiverId}&groupId=${groupId}`, function (data) {
                $('#chatBox').html('');
                if (data.length === 0) {
                    $('#chatBox').append('<div class="text-center py-3">No messages yet</div>');
                } else {
                    data.forEach(msg => {
                        appendMessage(msg.senderName, msg.messageText, msg.senderId, msg.timestamp, msg.profileImagePath, msg.messageId);
                    });
                    $('#chatBox').scrollTop($('#chatBox')[0].scrollHeight);
                }
            }).fail(err => console.error("Error loading messages:", err));
        }

        // Handle message deletion
        $(document).on('click', '.delete-message', function () {
            const messageId = $(this).data('id');
            if (messageId.toString().startsWith('temp-')) {
                $(`#message-${messageId}`).parent().remove();
                return;
            }
            if (confirm("Are you sure you want to delete this message?")) {
                $.post('/Chat/DeleteMessage', { messageId: messageId }, function () {
                    $(`#message-${messageId}`).parent().remove();
                }).fail(err => console.error("Error deleting message:", err));
            }
        });

        // Toggle message menu
        $(document).on('click', '.menu-btn', function (e) {
            e.stopPropagation();
            $('.menu-dropdown').not($(this).next()).hide();
            $(this).next('.menu-dropdown').toggle();
        });

        $(document).on('click', function () {
            $('.menu-dropdown').hide();
        });

        // Handle create group form submission
        $('#createGroupForm').submit(function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            $.ajax({
                url: "/Chat/CreateGroup",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function () {
                    location.reload();
                },
                error: function (xhr) {
                    console.error("Error creating group:", xhr.responseText);
                    alert("Error creating group: " + xhr.responseText);
                }
            });
        });

        // Handle delete group
        $('#deleteGroupBtn').click(function () {
            const groupIdToDelete = $(this).data('id');
            if (confirm("Are you sure you want to delete this group?")) {
                $.post('/Chat/DeleteGroup', { groupId: groupIdToDelete }, function () {
                    location.reload();
                }).fail(err => console.error("Error deleting group:", err));
            }
        });

        // Handle search
        $('#searchInput').on('keyup', function () {
            const searchTerm = $(this).val().toLowerCase();
            $('.chat-contact').each(function () {
                const name = $(this).find('.fw-bold').text().toLowerCase();
                if (name.includes(searchTerm)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        // Load saved chat on page load
        $(document).ready(function () {
            const savedChat = JSON.parse(localStorage.getItem('selectedChat'));
            if (savedChat) {
                if (savedChat.type === 'private') {
                    $(`.user-chat[data-id="${savedChat.id}"]`).trigger('click');
                } else if (savedChat.type === 'group') {
                    $(`.group-chat[data-id="${savedChat.id}"]`).trigger('click');
                }
            }
        });

        // Handle mobile back button
        document.addEventListener("DOMContentLoaded", function () {
            const backBtn = document.getElementById("backBtn");
            const chatSidebar = document.querySelector(".chat-sidebar");
            const chatMain = document.querySelector(".chat-main");

            backBtn.addEventListener("click", () => {
                if (window.innerWidth <= 603) {
                    chatSidebar.classList.remove("active");
                    chatMain.classList.remove("active");
                }
            });
        });

        // Handle search input
        document.getElementById('searchInput').addEventListener('keyup', function () {
            const filter = this.value.toLowerCase();
            const users = document.querySelectorAll('.user-chat');

            users.forEach(user => {
                const name = user.getAttribute('data-name').toLowerCase();
                const email = user.getAttribute('data-email').toLowerCase();

                if (name.includes(filter) || email.includes(filter)) {
                    user.style.display = '';
                } else {
                    user.style.display = 'none';
                }
            });
        });
    </script>
}